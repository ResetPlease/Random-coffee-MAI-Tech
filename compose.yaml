

services:

  postgres:
    image: postgres:latest
    restart: always
    ports:
    - 5435:5432
    env_file:
      ./configs/postgres.env
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p $$POSTGRES_PORT"]
      interval: 10s
      retries: 5
      start_period: 1s
      timeout: 5s
      
        
  migrations:
    build: ./backend/python_services/migration_service
    command: ["sh", "-c", "./entrypoint.sh"]
    volumes:
      - ./backend/python_services/migration_service/migration:/code/migration
      - ./backend/python_services/core:/code/core
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend-network
    env_file:
      - ./configs/postgres_connection.env
      - ./configs/migration.env


  redis:
    image: redis:latest
    env_file:
      - ./configs/redis.env
    command: ["sh", "-c", "redis-server --loglevel debug --port $$REDIS_PORT --requirepass $$REDIS_PASSWORD"]
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -p $$REDIS_PORT -a $$REDIS_PASSWORD ping | grep PONG"]
      interval: 10s
      retries: 5
      start_period: 1s
      timeout: 5s
    
  redis-commander:
    image: ghcr.io/joeferner/redis-commander:latest
    restart: always
    ports:
    - 8001:8081
    env_file:
      - ./configs/redis_connection.env
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - backend-network

  mongo:
    image: mongo
    restart: always
    ports:
      - 8010:27017
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      retries: 5
      start_period: 1s
      timeout: 5s
    env_file:
      - ./configs/mongo.env
    networks:
      - backend-network

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8090:8081
    env_file:
      - ./configs/mongo_express.env
    networks:
      - backend-network

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      retries: 5
      start_period: 1s
      timeout: 5s
    env_file:
      - ./configs/rabbitmq.env
    ports:
      - 15672:15672
    networks:
      - backend-network

  email_sender_service:
    build: ./backend/python_services/email_sender_service
    command: faststream run "app.main:app" --workers 5
    volumes:
      - ./backend/python_services/core:/code/core
      - ./backend/python_services/email_sender_service/app:/code/app
    depends_on:
      rabbitmq:
        condition: service_healthy
    env_file:
      - ./configs/rabbitmq_connection.env
    networks:
      - backend-network
      - frontend-network

  email-service:
    build: ./backend/python_services/email_service
    command: "uvicorn app.main:app --workers 1 --host 0.0.0.0 --port 8000"
    ports:
      - 8003:8000
    volumes:
      - ./backend/python_services/email_service/app:/code/app
      - ./backend/python_services/core:/code/core
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
    env_file:
      - ./configs/redis_connection.env
      - ./configs/email_service.env
      - ./configs/rabbitmq_connection.env

  auth-service:
    build: ./backend/python_services/auth_service
    command: "uvicorn app.main:app --workers 1 --host 0.0.0.0 --port 8000"
    ports:
      - 8005:8000
    volumes:
      - ./backend/python_services/auth_service/app:/code/app
      - ./backend/python_services/core:/code/core
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend-network
    env_file:
      - ./configs/postgres_connection.env
      - ./configs/redis_connection.env
      - ./configs/auth_service.env
      - ./configs/rabbitmq_connection.env

  tags-service:
    build: ./backend/python_services/tags_service
    command: "uvicorn app.main:app --workers 1 --host 0.0.0.0 --port 8000"
    ports:
      - 8006:8000
    volumes:
      - ./backend/python_services/tags_service/app:/code/app
      - ./backend/python_services/core:/code/core
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend-network
    env_file:
      - ./configs/postgres_connection.env
      - ./configs/auth_service_connection.env
      - ./configs/rabbitmq_connection.env
      - ./configs/redis_connection.env


  meeting-service:
    build: ./backend/python_services/meeting_service
    command: "uvicorn app.main:app --workers 1 --host 0.0.0.0 --port 8000"
    ports:
      - 8007:8000
    volumes:
      - ./backend/python_services/meeting_service/app:/code/app
      - ./backend/python_services/core:/code/core
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend-network
    env_file:
      - ./configs/redis_connection.env
      - ./configs/rabbitmq_connection.env
      - ./configs/postgres_connection.env
      - ./configs/auth_service_connection.env
      - ./configs/search_service_connection.env


  search-service:
    build: ./backend/python_services/search_service
    command: sh -c "python3 initialization/main.py && uvicorn app.main:app --workers 1 --reload --host 0.0.0.0 --port 8000"
    ports:
      - 8008:8000
    volumes:
      - ./backend/python_services/search_service/app:/code/app
      - ./backend/python_services/core:/code/core
      - ./backend/python_services/search_service/initialization:/code/initialization
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_healthy
    networks:
      - backend-network
    env_file:
      - ./configs/mongo_connection.env
      - ./configs/search_service.env
      - ./configs/auth_service_connection.env
      - ./configs/rabbitmq_connection.env


  express:
    build: ./frontend/express
    command: node server.js
    volumes:
     - ./frontend/express:/app
    env_file:
      - ./configs/express.env
    networks:
      - frontend-network

  react:
    build: ./frontend/random-coffe
    volumes:
     - ./frontend/random-coffe:/app
    command: npm start
    ports:
      - 3000:3000
    networks:
      - frontend-network


  nginx:
    image: nginx:latest
    ports:
      - 8000:8080
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_healthy
    volumes:
      - ./configs/nginx_config.conf:/etc/nginx/conf.d/default.conf
    networks:
      - backend-network
      - frontend-network


networks:
  backend-network:
    driver: bridge

  frontend-network:
    driver: bridge
